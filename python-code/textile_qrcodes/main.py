import os
import unidecode
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
from PIL import Image, ImageTk
from database import get_qr_codes, delete_table,connect_db
from excel_import import extract_images_from_excel
from qr_scanner import scan_qr


def import_excel():
    file_paths = filedialog.askopenfilenames(filetypes=[["Excel Files", "*.xlsx"]])
    if not file_paths:
        return
    for file_path in file_paths:
        table_name = os.path.splitext(os.path.basename(file_path))[0]
        table_name = unidecode.unidecode(table_name.replace(" ", "_"))
        cursor = connect_db().cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ –±–∞–∑–µ
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
        if cursor.fetchone():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–§–∞–π–ª {file_path} —É–∂–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª
        extract_images_from_excel(file_path)
        add_tab(os.path.splitext(os.path.basename(file_path))[0])

def update_table(table_name,tree):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—á–µ—Ç—á–∏–∫–æ–≤"""
    tree.delete(*tree.get_children())  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    conn = connect_db()
    cursor = conn.cursor()
    data = cursor.execute(f"SELECT export_date, qr_code_path, qr_number FROM {table_name}")
    qr_codes = data.fetchall()
    conn.close()

    for row in qr_codes:
        tree.insert("", "end", values=row)


def add_tab(table_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —Ç–∞–±–ª–∏—Ü–µ–π QR-–∫–æ–¥–æ–≤"""
    style = ttk.Style()
    style.configure("TNotebook.Tab", 
                font=("Arial", 10, "bold"),  # –®—Ä–∏—Ñ—Ç –≤–∫–ª–∞–¥–æ–∫
                padding=[10, 5],  # –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –≤–∫–ª–∞–¥–∫–∏
                background="#D3D3D3",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤–∫–ª–∞–¥–∫–∏
                foreground="black",  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
                borderwidth=2,
                case="uppercase")  # –ì—Ä–∞–Ω–∏—Ü–∞ –≤–∫–ª–∞–¥–æ–∫

    style.map("TNotebook.Tab", background=[("selected", "#4CAF50")])
    
    tab = ttk.Frame(tab_control)
    tab_control.add(tab, text=table_name)
    tab_control.pack(expand=True, fill=tk.BOTH)
    tab_control.select(tab)
    selected_table.set(table_name)

    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤
    tab_frame = ttk.Frame(tab)
    tab_frame.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

    # –°–æ–∑–¥–∞–µ–º Treeview
    style = ttk.Style()
    style.configure("Treeview.Heading", font=("Arial", 10, "bold"), background="lightgray", foreground="black", relief="raised", padding=(5, 5))
    style.configure("Treeview", rowheight=25)
    style.map("Treeview", background=[("selected", "#347083")])
    
    
    style = ttk.Style()

    # –û–±—â–∏–π —Å—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã
    style.configure("Treeview", 
                    font=("Arial", 10),  # –®—Ä–∏—Ñ—Ç —Å—Ç—Ä–æ–∫
                    rowheight=25,         # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫
                    background="white", 
                    foreground="black", 
                    fieldbackground="white",
                    borderwidth=1)

    style.map("Treeview",
          background=[("alternate", "#f2f2f2")])

    # –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    style.map("Treeview",background=[("alternate", "#232323")])
    style.map("Treeview",
            background=[("hover", "#0078D7")],
          foreground=[("hover", "white")])
    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    style.map("Treeview", 
            background=[("selected", "#292929")],  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            foreground=[("selected", "#ffffff")])  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    tree = ttk.Treeview(tab_frame, columns=("–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", "QR-–∫–æ–¥", "–ù–æ–º–µ—Ä"), show="headings", selectmode="browse")


    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    tree.heading("–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", text="–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    tree.heading("QR-–∫–æ–¥", text="QR-–∫–æ–¥")
    tree.heading("–ù–æ–º–µ—Ä", text="–ù–æ–º–µ—Ä")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
    tree.column("–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", anchor="center", width=150)
    tree.column("QR-–∫–æ–¥", anchor="center", width=200)
    tree.column("–ù–æ–º–µ—Ä", anchor="center", width=100)

    # **–î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä**
    vsb = ttk.Scrollbar(
        tab_frame, 
        orient="vertical", 
        command=tree.yview,
        cursor="hand2")
    tree.configure(yscrollcommand=vsb.set)

    # **–î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä**
    hsb = ttk.Scrollbar(tab_frame, orient="horizontal", command=tree.xview,cursor="hand2")
    tree.configure(xscrollcommand=hsb.set)

    # –†–∞–∑–º–µ—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Ñ—Ä–µ–π–º–µ
    tree.grid(row=0, column=0, sticky="nsew")
    vsb.grid(row=0, column=1, sticky="ns")  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä —Å–ø—Ä–∞–≤–∞
    hsb.grid(row=1, column=0, sticky="ew")  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä —Å–Ω–∏–∑—É

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ–±—ã Treeview —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏
    tab_frame.columnconfigure(0, weight=1)
    tab_frame.rowconfigure(0, weight=1)

    # **–°–æ—Ö—Ä–∞–Ω—è–µ–º Treeview –≤ —Å–ª–æ–≤–∞—Ä–µ**
    tree_views[table_name] = tree

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    update_table(table_name, tree)


def remove_selected_table():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    table_name = selected_table.get()
    if table_name:
        delete_table(table_name)
        for tab in tab_control.tabs():
            if tab_control.tab(tab, "text") == table_name:
                tab_control.forget(tab)
                break
        messagebox.showinfo("–£–¥–∞–ª–µ–Ω–æ", f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —É–¥–∞–ª–µ–Ω–∞")
        selected_table.set("")
        update_table("")
tree_views = {}
def on_tab_change(event):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    selected_tab = tab_control.tab(tab_control.select(), "text")
    print(selected_tab)
    selected_table.set(selected_tab)

    # –ü–æ–ª—É—á–∞–µ–º Treeview –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    if selected_tab in tree_views:
        tree = tree_views[selected_tab]  # –ü–æ–ª—É—á–∞–µ–º Treeview –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        update_table(selected_tab, tree)

    tab_control.bind("<<NotebookTabChanged>>", on_tab_change)


def load_existing_tables():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    for table in tables:
      
        table_name = table[0]
        if table_name != "sqlite_sequence":  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            add_tab(table_name)


 

tk_root = tk.Tk()
tk_root.title("QR Code Manager")
tk_root.geometry("800x600")

icon_path = "icon.ico"  
icon_image = Image.open(icon_path)
icon_photo = ImageTk.PhotoImage(icon_image)
tk_root.iconphoto(False, icon_photo)


selected_table = tk.StringVar()
# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
control_frame = tk.Frame(tk_root)
control_frame.pack(side=tk.TOP, fill=tk.X,anchor='n', pady=1)

# –ö–Ω–æ–ø–∫–∏
btn_scan = tk.Button(
    control_frame, 
    text="üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR", 
    command=lambda: scan_qr(selected_table.get(), lambda: update_table(selected_table.get())),
    bg="#292929",          
    fg="#ffffff",
    font=("Arial", 12, "bold"), 
    relief="flat",
    justify="center", 
    cursor="hand2", 
    padx=3,            
    pady=1 
    )
btn_scan.pack(side=tk.LEFT, padx=5)

btn_import = tk.Button(
    control_frame, 
    text="üìÇ –ò–º–ø–æ—Ä—Ç Excel", 
    command=import_excel,
    bg="#292985",          
    fg="#ffffff",
    font=("Arial", 12, "bold"), 
    relief="flat",
    justify="center", 
    cursor="hand2", 
    padx=3,            
    pady=1 )
btn_import.pack(side=tk.LEFT, padx=5)

btn_delete = tk.Button(
    control_frame, 
    text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", 
    command=remove_selected_table,
        bg="#862929",          
    fg="#ffffff",
    font=("Arial", 12, "bold"), 
    relief="flat",
    justify="center", 
    cursor="hand2", 
    padx=3,            
    pady=1)
btn_delete.pack(side=tk.LEFT, padx=5)
count_frame = tk.Frame(control_frame)
count_frame.pack(side=tk.LEFT, padx=10)
# –°—á–µ—Ç—á–∏–∫–∏
imported_count = tk.StringVar(value="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ QR-–∫–æ–¥–æ–≤: 0")
remaining_count = tk.StringVar(value="–û—Å—Ç–∞–ª–æ—Å—å QR-–∫–æ–¥–æ–≤: 0")

label_imported = tk.Label(
    count_frame, 
    textvariable=imported_count,
    font=("Arial", 10, "bold"),
    fg="#292929")
label_imported.grid(row=0, column=0, sticky="w")


label_remaining = tk.Label(
    count_frame, 
    textvariable=remaining_count,
    font=("Arial", 10, "bold"),
    fg="#292929")
label_remaining.grid(row=1, column=0, sticky="w")



# tab_frame = tk.Frame(tk_root, height=200)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É
# tab_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

# style = ttk.Style()
# style.configure("TNotebook.Tab", 
#                 font=("Arial", 10, "bold"),  # –®—Ä–∏—Ñ—Ç –≤–∫–ª–∞–¥–æ–∫
#                 padding=[10, 5],  # –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –≤–∫–ª–∞–¥–∫–∏
#                 background="#D3D3D3",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤–∫–ª–∞–¥–∫–∏
#                 foreground="black",  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
#                 borderwidth=2)  # –ì—Ä–∞–Ω–∏—Ü–∞ –≤–∫–ª–∞–¥–æ–∫

# style.map("TNotebook.Tab", background=[("selected", "#4CAF50")])
# –í–∫–ª–∞–¥–∫–∏ —Ç–∞–±–ª–∏—Ü    
tab_control = ttk.Notebook(tk_root, style="TNotebook")
tab_control.pack(expand=True, fill=tk.BOTH,side=tk.TOP,padx=10,pady=10)
tab_control.bind("<<NotebookTabChanged>>", on_tab_change)


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
load_existing_tables()

tk_root.mainloop()
